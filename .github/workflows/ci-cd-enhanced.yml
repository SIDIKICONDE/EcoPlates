name: Flutter CI/CD Enhanced

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

env:
  FLUTTER_VERSION: "stable"
  COVERAGE_THRESHOLD: 70

jobs:
  # Lint and Analysis job
  lint:
    name: Lint & Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Analyze project
        run: flutter analyze --no-fatal-infos
      
      - name: Format check
        run: dart format --set-exit-if-changed lib test
      
      - name: Comment PR with analysis results
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Flutter Analysis Failed**\n\nPlease run `flutter analyze` locally and fix all issues before pushing.'
            })

  # Test job with coverage
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
      
      - name: Create test environment file
        run: |
          mkdir -p environments
          cp .env.example environments/.env.dev
          echo "GOOGLE_MAPS_API_KEY=AIzaSyDummyKeyForCITesting123456789" >> environments/.env.dev
          echo "BACKEND_AVAILABLE=false" >> environments/.env.dev
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run tests with coverage
        run: flutter test --coverage --coverage-path=coverage/lcov.info
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: true
      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info | grep -E "lines......:" | sed 's/.*: \([0-9.]*\)%.*/\1/')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold of $COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold of $COVERAGE_THRESHOLD%"

  # Build matrix job
  build:
    name: Build ${{ matrix.target }} (${{ matrix.environment }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android builds
          - os: ubuntu-latest
            target: android
            build_cmd: flutter build apk --release
            artifact_path: build/app/outputs/flutter-apk/app-release.apk
            artifact_name: android-apk
            environment: dev
          
          - os: ubuntu-latest
            target: android
            build_cmd: flutter build apk --release
            artifact_path: build/app/outputs/flutter-apk/app-release.apk
            artifact_name: android-apk
            environment: staging
          
          # iOS build (requires macOS)
          - os: macos-latest
            target: ios
            build_cmd: flutter build ios --release --no-codesign
            artifact_path: build/ios/iphoneos/Runner.app
            artifact_name: ios-app
            environment: dev
          
          # Web builds
          - os: ubuntu-latest
            target: web
            build_cmd: flutter build web --release
            artifact_path: build/web
            artifact_name: web-build
            environment: dev
          
          - os: ubuntu-latest
            target: web
            build_cmd: flutter build web --release
            artifact_path: build/web
            artifact_name: web-build
            environment: staging
          
          # Desktop builds
          - os: windows-latest
            target: windows
            build_cmd: flutter build windows --release
            artifact_path: build/windows/x64/runner/Release
            artifact_name: windows-build
            environment: dev
          
          - os: ubuntu-latest
            target: linux
            build_cmd: flutter build linux --release
            artifact_path: build/linux/x64/release/bundle
            artifact_name: linux-build
            environment: dev
          
          - os: macos-latest
            target: macos
            build_cmd: flutter build macos --release
            artifact_path: build/macos/Build/Products/Release
            artifact_name: macos-build
            environment: dev

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
      
      - name: Install Linux dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
      
      - name: Setup environment (${{ matrix.environment }})
        run: |
          mkdir -p environments
          cp .env.example environments/.env.${{ matrix.environment }}
          echo "GOOGLE_MAPS_API_KEY=${{ secrets[format('GOOGLE_MAPS_API_KEY_{0}', matrix.environment)] || 'AIzaSyDummyKeyForCITesting123456789' }}" >> environments/.env.${{ matrix.environment }}
          echo "BACKEND_AVAILABLE=${{ matrix.environment == 'staging' && 'true' || 'false' }}" >> environments/.env.${{ matrix.environment }}
      
      - name: Setup Android secrets
        if: matrix.target == 'android'
        run: |
          echo "flutter.sdk=$FLUTTER_ROOT" > android/local.properties
          echo "googleMapsApiKey=${{ secrets[format('GOOGLE_MAPS_API_KEY_{0}', matrix.environment)] || 'AIzaSyDummyKeyForCITesting123456789' }}" >> android/local.properties
      
      - name: Setup iOS secrets
        if: matrix.target == 'ios'
        run: |
          mkdir -p ios/Config
          echo "GOOGLE_MAPS_API_KEY=${{ secrets[format('GOOGLE_MAPS_API_KEY_{0}', matrix.environment)] || 'AIzaSyDummyKeyForCITesting123456789' }}" > ios/Config/Secrets.xcconfig
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build ${{ matrix.target }}
        run: ${{ matrix.build_cmd }} --dart-define=ENV=${{ matrix.environment }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.environment }}
          path: ${{ matrix.artifact_path }}
          retention-days: 7
      
      - name: Verify no secrets in artifacts
        if: matrix.target == 'android' || matrix.target == 'web'
        run: |
          echo "Scanning artifacts for exposed secrets..."
          if find ${{ matrix.artifact_path }} -type f -exec grep -l "AIzaSyCt57yjJiwlrr81dQQusoPVwmKFTWWhR_k" {} \; | head -n 1; then
            echo "❌ CRITICAL: Hardcoded API key found in build artifacts!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found in artifacts"

  # Release job (only on master)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Accessibility test job
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
      
      - name: Create test environment
        run: |
          mkdir -p environments
          cp .env.example environments/.env.dev
          echo "GOOGLE_MAPS_API_KEY=AIzaSyDummyKeyForCITesting123456789" >> environments/.env.dev
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run accessibility tests
        run: |
          # Create a basic accessibility test if it doesn't exist
          mkdir -p test/accessibility
          cat > test/accessibility/semantics_test.dart << 'EOF'
          import 'package:flutter_test/flutter_test.dart';
          
          void main() {
            testWidgets('App has basic accessibility', (WidgetTester tester) async {
              // TODO: Add actual accessibility tests
              expect(true, true);
            });
          }
          EOF
          flutter test test/accessibility