// Mocks generated by Mockito 5.4.6 from annotations
// in ecoplates/test/domain/usecases/get_stock_items_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecoplates/domain/entities/stock_item.dart' as _i2;
import 'package:ecoplates/domain/repositories/stock_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStockItem_0 extends _i1.SmartFake implements _i2.StockItem {
  _FakeStockItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StockRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockRepository extends _i1.Mock implements _i3.StockRepository {
  MockStockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.StockItem>> getStockItems({
    _i3.StockItemsFilter? filter = _i3.StockItemsFilter.none,
    _i3.StockSortOption? sortBy = _i3.StockSortOption.nameAsc,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getStockItems, [], {
              #filter: filter,
              #sortBy: sortBy,
            }),
            returnValue: _i4.Future<List<_i2.StockItem>>.value(
              <_i2.StockItem>[],
            ),
          )
          as _i4.Future<List<_i2.StockItem>>);

  @override
  _i4.Future<_i2.StockItem?> getStockItemById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getStockItemById, [id]),
            returnValue: _i4.Future<_i2.StockItem?>.value(),
          )
          as _i4.Future<_i2.StockItem?>);

  @override
  _i4.Future<_i2.StockItem> updateStockItem(_i2.StockItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#updateStockItem, [item]),
            returnValue: _i4.Future<_i2.StockItem>.value(
              _FakeStockItem_0(
                this,
                Invocation.method(#updateStockItem, [item]),
              ),
            ),
          )
          as _i4.Future<_i2.StockItem>);

  @override
  _i4.Future<_i2.StockItem> adjustQuantity(String? id, int? delta) =>
      (super.noSuchMethod(
            Invocation.method(#adjustQuantity, [id, delta]),
            returnValue: _i4.Future<_i2.StockItem>.value(
              _FakeStockItem_0(
                this,
                Invocation.method(#adjustQuantity, [id, delta]),
              ),
            ),
          )
          as _i4.Future<_i2.StockItem>);

  @override
  _i4.Future<_i2.StockItem> updateStatus(
    String? id,
    _i2.StockItemStatus? status,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateStatus, [id, status]),
            returnValue: _i4.Future<_i2.StockItem>.value(
              _FakeStockItem_0(
                this,
                Invocation.method(#updateStatus, [id, status]),
              ),
            ),
          )
          as _i4.Future<_i2.StockItem>);

  @override
  _i4.Future<_i2.StockItem> createStockItem(_i2.StockItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#createStockItem, [item]),
            returnValue: _i4.Future<_i2.StockItem>.value(
              _FakeStockItem_0(
                this,
                Invocation.method(#createStockItem, [item]),
              ),
            ),
          )
          as _i4.Future<_i2.StockItem>);

  @override
  _i4.Future<bool> deleteItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteItem, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
